import Head from 'next/head';
import { useState, useContext } from 'react';
import { MainContext } from '../../context/context';
import BigNumber from 'bignumber.js';
import { providers, utils } from 'ethers';
import { WebBundlr } from '@bundlr-network/client';
import { Input, Button, Text, VStack } from '@chakra-ui/react';
import { ConnectButton } from '@rainbow-me/rainbowkit';

export default function Home() {
  const [selectedFile, setSelectedFile] = useState();
  const [img, setImg] = useState();
  const [URI, setURI] = useState<string | undefined>();
  const [amount, setAmount] = useState();
  const [balance, setBalance] = useState<string>('');
  const [bundlrrInstance, setBundlrrInstance] = useState<WebBundlr>();
  const [value, setValue] = useState('0.02')




  const { initialize, getBalance, bundlrInstance }: any =
    useContext(MainContext);


    const initialiseBundlr = async () => {
        const provider = new providers.Web3Provider(window.ethereum as any);
        await provider._ready();
        const bundlr = new WebBundlr(
            "https://devnet.bundlr.network",
            "matic",
            provider,
            {
                providerUrl:
                    process.env.NEXT_PUBLIC_ALCHEMY_RPC_URL,
            }
        );
        await bundlr.ready();
        setBundlrrInstance(bundlr);

    }

  const uploadImage = async () => {
    let txn = await bundlrInstance.uploader.upload(selectedFile, [
      { name: 'Content-Type', value: 'image/png' },
    ]);
    setURI(`http://arweave.net/${txn.data.id}`);
    getBalance();
  };

  const handleFileChange = (e: any) => {
    const reader = new FileReader();
    const file = e.target.files[0];
    if (file) {
      reader.onloadend = () => {
        if (reader.result) {
          setSelectedFile((Buffer as any).from(reader.result));
        }
      };
      reader.readAsArrayBuffer(file);
      const objectUrl: any = URL.createObjectURL(file);
      setImg(objectUrl);
    }
  };

//   const fundWallet = async () => {
//     if (!amount) return;
//     const parseAmount = parseInput(amount);
//     let response = await bundlrInstance.fund(parseAmount);
//     console.log('wallet funded: ', response);
//     getBalance();
//   };

//   const parseInput = (input: number) => {
//     const conversion = new BigNumber(input).multipliedBy(
//       bundlrInstance.currencyConfig.base[1]
//     );
//     if (conversion.isLessThan(1)) {
//       console.log('error: value too small');
//       return;
//     } else {
//       return conversion;
//     }
//   };

        async function fundWallet(amount: number) {
            try {
                if (bundlrInstance) {
                    if (!amount) return
                    const amountParsed = parseInput(amount)
                    if (amountParsed) {
                        let response = await bundlrInstance.fund(amountParsed)
                        console.log('Wallet funded: ', response)
                    }
                    fetchBalance()
                }
            } catch (error) {
                console.log("error", error);
            }
        }

        function parseInput(input: number) {
            const conv = new BigNumber(input).multipliedBy(bundlrInstance!.currencyConfig.base[1])
            if (conv.isLessThan(1)) {
                console.log('error: value too small')
                return
            } else {
                return conv
            }
        }


        async function fetchBalance() {
            if (bundlrInstance) {
                const bal = await bundlrInstance.getLoadedBalance();
                console.log("bal: ", utils.formatEther(bal.toString()));
                setBalance(utils.formatEther(bal.toString()));
                console.log("updated balance: ", utils.formatEther(bal.toString()))
            }
        }

        if (!bundlrInstance) {
            return (
              <div className='justify-center items-center h-screen flex '>
                <VStack gap={8}>
                  <ConnectButton />
                  <Text className='text-4xl font-bold'>
                    Let's initialise Bundlr now
                  </Text>
                  <Button className='mt-10' onClick={initialiseBundlr}>Initialise Bundlr</Button>
                </VStack>
              </div>
            )
          }
  return (
    <div>
      <Head>
        <title>Arweave/Bundlr</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
      <div>
      <Text fontSize={'xl'}>
                    Your current balace is: {balance || 0} $BNDLR
                </Text>
                <Input
                  placeholder="add funds"
                  onChange={(e) => setValue((e as any).target.value)}
                />
                <Button onClick={() => fundWallet(+value)}>ðŸ’¸ Add Fund</Button>

    </div>
        <div style={{ paddingTop: '10em' }}>
          <input type="file" onChange={handleFileChange} />
          <button style={button} onClick={uploadImage}>
            Upload Image
          </button>
        </div>
        {/* {img && (
          <div style={previewFlex}>
            <div style={{ margin: '0 auto' }}>
              <h3>Our Image</h3>
              {img && (
                <div>
                  <img src={img} style={previewStyle} />
                </div>
              )}
            </div>
            <div style={{ margin: '0 auto' }}>
              <h3>Arweave Image</h3>
              {URI && (
                <>
                  <img src={URI} style={previewStyle} />
                  <a href={URI} target="_blank">
                    {URI}
                  </a>
                </>
              )}
            </div>
          </div>
        )} */}
      </main>
    </div>
  );
}
const previewStyle = {
  maxWidth: '500px',
  height: 'auto',
  margin: '0 auto',
};

const previewFlex = {
  display: 'flex',
};

const button = {
  outline: 'none',
  border: '1px solid black',
  backgroundColor: 'white',
  padding: '10px',
  width: '200px',
  marginBottom: 10,
  cursor: 'pointer',
};